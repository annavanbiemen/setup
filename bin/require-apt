#!/bin/bash

# Exit on errors
set -euo pipefail

usage() {
    echo "Require APT packages (optionally from custom sources)"
    echo
    echo "Usage: $(basename "$0") [packages] [options]"
    echo
    echo "Options:"
    echo "  --source SOURCE        Descriptive source name"
    echo "  --uri URI              Package URI"
    echo "  --key KEY              Key URI (can be an ASCII-armored or binary GPG key("
    echo "  --suite SUITE          Suite                    (e.g. 'noble')"
    echo "  --component COMPONENT  Component                (e.g. 'stable', 'main')"
    echo "  --arch ARCH            Optional architecture    (e.g. 'amd64')"
    echo "  --language LANGUAGE    Optional language codes  (e.g. 'en de')."
    echo
    echo "When --source is specified, you must also specify --uri, --key, and --component"
}

if [ "$#" -eq 0 ]; then
    usage
    exit 1
fi

# Parse arguments
packages=()
source_name=""
source_uri=""
source_key=""
source_arch="$(dpkg --print-architecture)"
source_suite="stable"
source_component="main"
source_lang=""
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --source) source_name="$2"; shift ;;
        --uri) source_uri="$2"; shift ;;
        --key) source_key="$2"; shift ;;
        --arch) source_arch="$2"; shift ;;
        --suite) source_suite="$2"; shift ;;
        --suite-codename) source_suite=$(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") ;;
        --component) source_component="$2"; shift ;;
        --language) source_lang="$2"; shift ;;
        --*) echo "Unknown parameter passed: $1"; usage; exit 1 ;;
        *) packages+=("$1") ;;
    esac
    shift
done

if [ -n "${source_name}" ]; then

    # Validate required arguments
    if [ -z "$source_uri" ] || [ -z "$source_key" ] || [ -z "$source_component" ]; then
        echo "Error: Missing required arguments."
        usage
        exit 1
    fi

    require-apt ca-certificates gpg

    # Source paths
    SOURCE_DIR="/etc/apt/sources.list.d"
    SOURCE_FILE="$SOURCE_DIR/${source_name}.sources"

    # --- Download the GPG key into a variable ---
    echo "Downloading GPG key from $source_key..."
    GPG_HOME=$(mktemp -d)
    GPG_KEY_ORIGINAL="$GPG_HOME/key.gpg"
    GPG_KEY_ARMORED="$GPG_HOME/key.asc"
    curl -fsSL "$source_key" > "$GPG_KEY_ORIGINAL"
    gpg --homedir "$GPG_HOME" --import "$GPG_KEY_ORIGINAL"
    gpg --homedir "$GPG_HOME" --export --armor > "$GPG_KEY_ARMORED"

    # Create the sources file in DEB822 format with the embedded key
    echo -e "\e[1mWriting $SOURCE_FILE\e[0m"
    {
        echo "Types: deb"
        echo "URIs: $source_uri"
        echo "Suites: $source_suite"
        echo "Components: $source_component"
        echo "Architectures: $source_arch"
        if [ -n "$source_lang" ]; then
            echo "Languages: $source_lang"
        fi
        echo "Signed-By: |"
        sed 's/^/ /' "$GPG_KEY_ARMORED"
    } | sudo tee "$SOURCE_FILE"
fi

# Collect missing packages
missing=()
for package in "${packages[@]}"; do
    if ! dpkg-query -W -f='${Status}' "$package" 2>/dev/null | grep -q "install ok installed"; then
        missing+=("$package")
    fi
done

# Install missing packages
if [ ${#missing[@]} -gt 0 ]; then
    export DEBIAN_FRONTEND=noninteractive
    command="sudo apt-get install --update --yes --no-install-recommends"
    echo -e "\e[1m$command" "${missing[@]}" "\e[0m"
    $command "${missing[@]}"
fi
