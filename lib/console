#!/bin/bash

console::ansi() {
    local style="$1"
    local text="$2"

    printf "\e[%dm%s\e[0m\n" "$style" "$text"
}

# Print text in 24-bit color
console::color() {
    local color="${1#"#"}"
    local text="$2"

    printf "\e[38;2;%d;%d;%dm%s\e[0m\n" "0x${color:0:2}" "0x${color:2:2}" "0x${color:4:2}" "$text"
}

# Print text in gradient using 2 24-bit colors
console::gradient() {
    local color1="${1#"#"}"
    local color2="${2#"#"}"
    local text="$3"

    local length=${#text}
    if [ "$length" -le 1 ]; then
        console::color "$color1" "$text"
        return
    fi

    # Calculate RGB values and difference between them
    local rgb1=($((16#${color1:0:2})) $((16#${color1:2:2})) $((16#${color1:4:2})))
    local rgb2=($((16#${color2:0:2})) $((16#${color2:2:2})) $((16#${color2:4:2})))
    local diff=($((rgb2[0] - rgb1[0])) $((rgb2[1] - rgb1[1])) $((rgb2[2] - rgb1[2])))

    # Loop through each character of the string
    local rgb i z
    for ((i = 0, z = length - 1; i < length; i++)); do
        # Calculate the new RGB values using integer arithmetic.
        rgb=(
            $((diff[0] * i / z + rgb1[0]))
            $((diff[1] * i / z + rgb1[1]))
            $((diff[2] * i / z + rgb1[2]))
        )

        # Print the character with the calculated 24-bit color
        printf "\e[38;2;%d;%d;%dm%s" "${rgb[@]}" "${text:$i:1}"
    done

    # Reset color and print a newline
    printf "\e[0m\n"
}

console::title() {
    local blue="#80B0EE"
    local pink="#EE79A2"
    local text="$1"

    console::gradient "$blue" "$pink" "$text"
}

console::heading() {
    console::ansi 1 "$1"
}

console::debug() {
    console::ansi 2 "$1"
}

console::info() {
    echo "$1"
}

console::warning() {
    console::ansi 33 "$1"
}

console::error() {
    console::ansi 31 "$1"
}
